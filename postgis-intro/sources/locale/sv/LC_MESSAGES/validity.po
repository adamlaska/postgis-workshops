# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2023, Paul Ramsey | Mark Leslie | PostGIS contributors
# This file is distributed under the same license as the Introduction to PostGIS package.
# Daniel Nylander <daniel@danielnylander.se>, 2025.
msgid ""
msgstr ""
"Project-Id-Version: Introduction to PostGIS 1.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-07 21:46-0500\n"
"PO-Revision-Date: 2025-06-06 06:20+0000\n"
"Last-Translator: Daniel Nylander <daniel@danielnylander.se>\n"
"Language-Team: Swedish <https://weblate.osgeo.org/projects/postgis-workshop/"
"validity/sv/>\n"
"Language: sv\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=n != 1;\n"
"X-Generator: Weblate 5.4.3\n"

#: ../../en/validity.rst:4
msgid "Validity"
msgstr "Validitet"

#: ../../en/validity.rst:6
msgid "In 90% of the cases the answer to the question, \"why is my query giving me a 'TopologyException' error\" is \"one or more of the inputs are invalid\".  Which begs the question: what does it mean to be invalid, and why should we care?"
msgstr ""
"I 90% o av fallen är svaret på frågan \"varför ger min fråga mig ett "
"'TopologyException'-fel\" \"en eller flera av ingångarna är ogiltiga\".  "
"Vilket väcker frågan: vad innebär det att vara ogiltig, och varför ska vi "
"bry oss?"

#: ../../en/validity.rst:9
msgid "What is Validity"
msgstr "Vad är validitet"

#: ../../en/validity.rst:11
msgid "Validity is most important for polygons, which define bounded areas and require a good deal of structure. Lines are very simple and cannot be invalid, nor can points."
msgstr ""
"Validitet är viktigast för polygoner, som definierar avgränsade områden och "
"kräver en hel del struktur. Linjer är mycket enkla och kan inte vara "
"ogiltiga, inte heller punkter."

#: ../../en/validity.rst:13
msgid "Some of the rules of polygon validity feel obvious, and others feel arbitrary (and in fact, are arbitrary)."
msgstr ""
"Vissa av reglerna för polygoners giltighet känns självklara, medan andra "
"känns godtyckliga (och faktiskt är godtyckliga)."

#: ../../en/validity.rst:15
msgid "Polygon rings must close."
msgstr "Polygonringar måste stängas."

#: ../../en/validity.rst:16
msgid "Rings that define holes should be inside rings that define exterior boundaries."
msgstr ""
"Ringar som definierar hål bör vara inuti ringar som definierar yttre gränser."

#: ../../en/validity.rst:17
msgid "Rings may not self-intersect (they may neither touch nor cross themselves)."
msgstr ""
"Ringar får inte korsa sig själva (de får varken röra vid eller korsa sig "
"själva)."

#: ../../en/validity.rst:18
msgid "Rings may not touch other rings, except at a point."
msgstr "Ringarna får inte röra vid andra ringar, utom vid en punkt."

#: ../../en/validity.rst:19
msgid "Elements of multi-polygons may not touch each other."
msgstr "Element i multipolygoner får inte röra vid varandra."

#: ../../en/validity.rst:21
msgid "The last three rules are in the arbitrary category. There are other ways to define polygons that are equally self-consistent but the rules above are the ones used by the :term:`OGC` :term:`SFSQL` standard that PostGIS conforms to."
msgstr ""
"De tre sista reglerna är i kategorin godtyckliga. Det finns andra sätt att "
"definiera polygoner som är lika självkonsistenta men reglerna ovan är de som "
"används av :term:`OGC` :term:`SFSQL`-standarden som PostGIS följer."

#: ../../en/validity.rst:23
msgid "The reason the rules are important is because algorithms for geometry calculations depend on consistent structure in the inputs. It is possible to build algorithms that have no structural assumptions, but those routines tend to be very slow, because the first step in any structure-free routine is to *analyze the inputs and build structure into them*."
msgstr ""
"Anledningen till att reglerna är viktiga är att algoritmer för "
"geometriberäkningar är beroende av en konsekvent struktur i indata. Det är "
"möjligt att bygga algoritmer som inte har några strukturella antaganden, men "
"dessa rutiner tenderar att vara mycket långsamma, eftersom det första steget "
"i en strukturfri rutin är att *analysera indata och bygga in struktur i dem*."

#: ../../en/validity.rst:25
msgid "Here's an example of why structure matters. This polygon is invalid:"
msgstr ""
"Här är ett exempel på varför strukturen är viktig. Den här polygonen är "
"ogiltig:"

#: ../../en/validity.rst:31
msgid "You can see the invalidity a little more clearly in this diagram:"
msgstr "Du kan se ogiltigheten lite tydligare i det här diagrammet:"

#: ../../en/validity.rst:35
msgid "The outer ring is actually a figure-eight, with a self-intersection in the middle. Note that the graphic routines successfully render the polygon fill, so that visually it is appears to be an \"area\": two one-unit squares, so a total area of two units of area."
msgstr ""
"Den yttre ringen är egentligen en åtta, med en självkorsande punkt i mitten. "
"Observera att de grafiska rutinerna lyckas rendera polygonfyllningen, så att "
"det visuellt ser ut som en \"yta\": två rutor med en enhet, så en total yta "
"på två ytenheter."

#: ../../en/validity.rst:37
msgid "Let's see what the database thinks the area of our polygon is:"
msgstr "Låt oss se vad databasen tror att ytan på vår polygon är:"

#: ../../en/validity.rst:51
msgid "What's going on here? The algorithm that calculates area assumes that rings do not self-intersect. A well-behaved ring will always have the area that is bounded (the interior) on one side of the bounding line (it doesn't matter which side, just that it is on *one* side). However, in our (poorly behaved) figure-eight, the bounded area is to the right of the line for one lobe and to the left for the other. This causes the areas calculated for each lobe to cancel out (one comes out as 1, the other as -1) hence the \"zero area\" result."
msgstr ""
"Vad är det som händer här? Algoritmen som beräknar arean förutsätter att "
"ringar inte skär varandra. En välskött ring kommer alltid att ha det område "
"som avgränsas (det inre) på ena sidan av begränsningslinjen (det spelar "
"ingen roll vilken sida, bara det är på *en* sida). Men i vår (illa skötta) "
"åtta ligger det avgränsade området till höger om linjen för den ena loben "
"och till vänster för den andra. Detta leder till att de ytor som beräknas "
"för varje lob tar ut varandra (den ena blir 1, den andra -1), därav "
"resultatet \"noll yta\"."

#: ../../en/validity.rst:55
msgid "Detecting Validity"
msgstr "Detektering av validitet"

#: ../../en/validity.rst:57
msgid "In the previous example we had one polygon that we **knew** was invalid. How do we detect invalidity in a table with millions of geometries? With the :command:`ST_IsValid(geometry)` function. Used against our figure-eight, we get a quick answer:"
msgstr ""
"I det föregående exemplet hade vi en polygon som vi **visste** var ogiltig. "
"Hur upptäcker vi ogiltighet i en tabell med miljontals geometrier? Med "
"funktionen :command:`ST_IsValid(geometry)`. När den används mot vår åttonde "
"figur får vi ett snabbt svar:"

#: ../../en/validity.rst:69
msgid "Now we know that the feature is invalid, but we don't know why. We can use the :command:`ST_IsValidReason(geometry)` function to find out the source of the invalidity:"
msgstr ""
"Nu vet vi att funktionen är ogiltig, men vi vet inte varför. Vi kan använda "
"funktionen :command:`ST_IsValidReason(geometry)` för att ta reda på källan "
"till ogiltigheten:"

#: ../../en/validity.rst:81
msgid "Note that in addition to the reason (self-intersection) the location of the invalidity (coordinate (1 1)) is also returned."
msgstr ""
"Observera att förutom orsaken (självskärning) returneras även platsen för "
"invaliditeten (koordinat (1 1))."

#: ../../en/validity.rst:83
msgid "We can use the :command:`ST_IsValid(geometry)` function to test our tables too:"
msgstr ""
"Vi kan också använda funktionen :command:`ST_IsValid(geometry)` för att "
"testa våra tabeller:"

#: ../../en/validity.rst:104
msgid "Repairing Invalidity"
msgstr "Reparation av invaliditet"

#: ../../en/validity.rst:106
msgid "Repairing invalidity involves stripping a polygon down to its simplest structures (rings), ensuring the rings follow the rules of validity, then building up new polygons that follow the rules of ring enclosure. Frequently the results are intuitive, but in the case of extremely ill-behaved inputs, the valid outputs may not conform to your intuition of how they should look. Recent versions of PostGIS include different algorithms for geometry repair: read the `manual page <http://postgis.net/docs/ST_MakeValid.html>`_ carefully and choose the one you like best."
msgstr ""
"Reparation av ogiltighet innebär att en polygon strippas ner till sina "
"enklaste strukturer (ringar), att ringarna följer giltighetsreglerna och att "
"nya polygoner byggs upp som följer reglerna för inneslutning av ringar. Ofta "
"är resultaten intuitiva, men i fallet med extremt olämpliga indata kanske de "
"giltiga utdata inte överensstämmer med din intuition om hur de borde se ut. "
"De senaste versionerna av PostGIS innehåller olika algoritmer för "
"geometrireparation: läs `manualsidan <http://postgis.net/docs/ST_MakeValid."
"html>`_ noggrant och välj den du tycker bäst om."

#: ../../en/validity.rst:108
msgid "For example, here's a classic invalidity -- the \"banana polygon\" -- a single ring that encloses an area but bends around to touch itself, leaving a \"hole\" which is not actually a hole."
msgstr ""
"Här är till exempel en klassisk ogiltighet - \"bananpolygonen\" - en enda "
"ring som omsluter ett område men böjer sig runt för att röra vid sig själv "
"och lämnar ett \"hål\" som egentligen inte är ett hål."

#: ../../en/validity.rst:117
msgid "Running `ST_MakeValid <http://postgis.net/docs/ST_MakeValid.html>`_ on the polygon returns a valid :term:`OGC` polygon, consisting of an outer and inner ring that touch at one point."
msgstr ""
"Om du kör `ST_MakeValid <http://postgis.net/docs/ST_MakeValid.html>`_ på "
"polygonen får du tillbaka en giltig :term:`OGC`-polygon, bestående av en "
"yttre och en inre ring som berör varandra i en punkt."

#: ../../en/validity.rst:133
msgid "The \"banana polygon\" (or \"inverted shell\") is a case where the :term:`OGC` topology model for valid geometry and the model used internally by ESRI differ. The ESRI model considers rings that touch to be invalid, and prefers the banana form for this kind of shape. The OGC model is the reverse. Neither is \"correct\", they are just different ways to model the same situation."
msgstr ""
"\"Bananpolygonen\" (eller \"det inverterade skalet\") är ett fall där "
":term:`OGC` topologimodell för giltig geometri och den modell som används "
"internt av ESRI skiljer sig åt. ESRI-modellen anser att ringar som rör vid "
"varandra är ogiltiga och föredrar bananformen för denna typ av form. OGC-"
"modellen är den omvända. Ingen av dem är \"korrekt\", de är bara olika sätt "
"att modellera samma situation."

#: ../../en/validity.rst:137
msgid "Bulk Validity Repair"
msgstr "Reparation av bulkvaliditet"

#: ../../en/validity.rst:139
msgid "Here's an example of SQL to flag invalid geometries for review while adding a repaired version to the table."
msgstr ""
"Här är ett exempel på SQL för att flagga ogiltiga geometrier för granskning "
"samtidigt som en reparerad version läggs till i tabellen."

#: ../../en/validity.rst:159
msgid "A good tool for visually repairing invalid geometry is OpenJump (http://openjump.org) which includes a validation routine under **Tools->QA->Validate Selected Layers**."
msgstr ""
"Ett bra verktyg för att visuellt reparera ogiltig geometri är OpenJump "
"(http://openjump.org) som innehåller en valideringsrutin under **Tools->QA-"
">Validate Selected Layers**."

#: ../../en/validity.rst:163
msgid "Function List"
msgstr "Funktionslista"

#: ../../en/validity.rst:165
msgid "`ST_IsValid(geometry A) <http://postgis.net/docs/ST_IsValid.html>`_: Returns a boolean indiciting whether the geometery is valid."
msgstr ""
"`ST_IsValid(geometri A) <http://postgis.net/docs/ST_IsValid.html>`_: "
"Returnerar en boolean som anger om geometrin är giltig."

#: ../../en/validity.rst:167
msgid "`ST_IsValidReason(geometry A) <http://postgis.net/docs/ST_IsValidReason.html>`_: Returns a text string with the reason for the invalidity and a coordinate of invalidity."
msgstr ""
"`ST_IsValidReason(geometri A) <http://postgis.net/docs/ST_IsValidReason."
"html>`_: Returnerar en textsträng med orsaken till ogiltigheten och en "
"koordinat för ogiltigheten."

#: ../../en/validity.rst:169
msgid "`ST_MakeValid(geometry A) <http://postgis.net/docs/ST_MakeValid.html>`_: Returns a geometry re-constructed to obey the validity rules."
msgstr ""
"`ST_MakeValid(geometri A) <http://postgis.net/docs/ST_MakeValid.html>`_: "
"Returnerar en geometri som är omkonstruerad för att följa giltighetsreglerna."
