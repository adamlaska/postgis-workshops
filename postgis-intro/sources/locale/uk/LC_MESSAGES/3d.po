# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2023, Paul Ramsey | Mark Leslie | PostGIS contributors
# This file is distributed under the same license as the Introduction to PostGIS package.
# Denys Kovshun <deniskovshun@gmail.com>, 2025.
msgid ""
msgstr "Project-Id-Version: Introduction to PostGIS 1.1\nReport-Msgid-Bugs-To: \nPOT-Creation-Date: 2025-06-10 18:57+0000\nPO-Revision-Date: 2025-08-11 14:42+0000\nLast-Translator: Denys Kovshun <deniskovshun@gmail.com>\nLanguage-Team: Ukrainian <https://weblate.osgeo.org/projects/postgis-workshop/3d/uk/>\nLanguage: uk\nMIME-Version: 1.0\nContent-Type: text/plain; charset=UTF-8\nContent-Transfer-Encoding: 8bit\nPlural-Forms: nplurals=3; plural=n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2;\nX-Generator: Weblate 5.4.3\n"

#: ../../en/3d.rst:4
msgid "3-D"
msgstr "3D (тривимірний)"

#: ../../en/3d.rst:7
msgid "3-D Geometries"
msgstr "Тривимірні геометрії"

#: ../../en/3d.rst:9
msgid "So far, we have been working with 2-D geometries, with only X and Y coordinates. But PostGIS supports additional dimensions on all geometry types, a \"Z\" dimension to add height information and a \"M\" dimension for additional dimensional information (commonly time, or road-mile, or upstream-distance information) for each coordinate."
msgstr "Поки що ми працювали з двовимірними геометріями, що мають лише координати X та Y. Але PostGIS підтримує додаткові виміри для всіх типів геометрій — вимір «Z» для додавання інформації про висоту та вимір «M» для додаткової інформації (зазвичай це час, кілометраж дороги або відстань за течією) для кожної координати."

#: ../../en/3d.rst:11
msgid "For 3-D and 4-D geometries, the extra dimensions are added as extra coordinates for each vertex in the geometry, and the geometry type is enhanced to indicate how to interpret the extra dimensions. Adding the extra dimensions results in three extra possible geometry types for each geometry primitive:"
msgstr "Для тривимірних (3D) та чотиривимірних (4D) геометрій додаткові виміри додаються як додаткові координати для кожної вершини геометрії, а тип геометрії розширюється, щоб вказати, як інтерпретувати ці додаткові виміри. Додавання додаткових вимірів призводить до появи трьох нових можливих типів геометрії для кожного примітиву геометрії:"

#: ../../en/3d.rst:13
msgid "Point (a 2-D type) is joined by PointZ, PointM and PointZM types."
msgstr "До типу Point (двовимірний тип) додаються типи PointZ, PointM та PointZM."

#: ../../en/3d.rst:14
msgid "Linestring (a 2-D type) is joined by LinestringZ, LinestringM and LinestringZM types."
msgstr "До типу Linestring (двовимірний тип) додаються типи LinestringZ, LinestringM та LinestringZM."

#: ../../en/3d.rst:15
msgid "Polygon (a 2-D type) is joined by PolygonZ, PolygonM and PolygonZM types."
msgstr "До типу Polygon (двовимірний тип) додаються типи PolygonZ, PolygonM та PolygonZM."

#: ../../en/3d.rst:16
msgid "And so on."
msgstr "І так далі."

#: ../../en/3d.rst:18
msgid "For well-known text (:term:`WKT`) representation, the format for higher dimensional geometries is given by the ISO SQL/MM specification. The extra dimensionality information is simply added to the text string after the type name, and the extra coordinates added after the X/Y information. For example:"
msgstr "Для представлення у форматі well-known text (:term:WKT) формат для багатовимірних геометрій визначений у специфікації ISO SQL/MM. Інформація про додаткові виміри просто додається до текстового рядка після назви типу, а додаткові координати — після координат X/Y. Наприклад:"

#: ../../en/3d.rst:20
msgid "POINT ZM (1 2 3 4)"
msgstr "POINT ZM (1 2 3 4)"

#: ../../en/3d.rst:21
msgid "LINESTRING M (1 1 0, 1 2 0, 1 3 1, 2 2 0)"
msgstr "LINESTRING M (1 1 0, 1 2 0, 1 3 1, 2 2 0)"

#: ../../en/3d.rst:22
msgid "POLYGON Z ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0))"
msgstr "POLYGON Z ((0 0 0, 0 1 0, 1 1 0, 1 0 0, 0 0 0))"

#: ../../en/3d.rst:24
msgid "The ST_AsText() function will return the above representations when dealing with 3-D and 4-D geometries."
msgstr "Функція ST_AsText() повертатиме наведені вище подання при роботі з тривимірними (3D) та чотиривимірними (4D) геометріями."

#: ../../en/3d.rst:26
msgid "For well-known binary (:term:`WKB`) representation, the format for higher dimensional geometries is given by the ISO SQL/MM specification. The BNF form of the format is available from https://git.osgeo.org/gitea/postgis/postgis/src/branch/master/doc/bnf-wkb.txt."
msgstr "Для подання у форматі well-known binary (:term:WKB) формат для багатовимірних геометрій визначено у специфікації ISO SQL/MM. BNF-форма цього формату доступна за посиланням: https://git.osgeo.org/gitea/postgis/postgis/src/branch/master/doc/bnf-wkb.txt."

#: ../../en/3d.rst:28
msgid "In addition to higher-dimensional forms of the standard types, PostGIS includes a few new types that make sense in a 3-D space:"
msgstr "Окрім багатовимірних варіантів стандартних типів, PostGIS включає кілька нових типів, які мають сенс у тривимірному просторі:"

#: ../../en/3d.rst:30
msgid "The TIN type allows you to model triangular meshes as rows in your database."
msgstr "Тип TIN дозволяє моделювати трикутні сітки у вигляді рядків у вашій базі даних."

#: ../../en/3d.rst:31
msgid "The POLYHEDRALSURFACE allows you to model volumetric objects in your database."
msgstr "Тип POLYHEDRALSURFACE дозволяє моделювати об’ємні об’єкти у вашій базі даних."

#: ../../en/3d.rst:33
msgid "Since both these types are for modelling 3-D objects, it only really makes sense to use the Z variants.  An example of a POLYHEDRALSURFACE Z would be the 1 unit cube:"
msgstr "Оскільки обидва ці типи призначені для моделювання тривимірних об’єктів, має сенс використовувати лише варіанти з виміром Z. Прикладом POLYHEDRALSURFACE Z може бути куб зі стороною 1 одиниця:"

#: ../../en/3d.rst:48
msgid "3-D Functions"
msgstr "Функції для 3D"

#: ../../en/3d.rst:50
msgid "There are a number of functions built to calculate relationships between 3-D objects:"
msgstr "Існує низка функцій, створених для обчислення взаємозв’язків між тривимірними об’єктами:"

#: ../../en/3d.rst:52
msgid "ST_3DClosestPoint — Returns the 3-dimensional point on g1 that is closest to g2. This is the first point of the 3D shortest line."
msgstr "ST_3DClosestPoint — повертає тривимірну точку на об’єкті g1, яка є найближчою до об’єкта g2. Це перша точка найкоротшої 3D лінії."

#: ../../en/3d.rst:53
msgid "ST_3DDistance — For geometry type Returns the 3-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units."
msgstr "ST_3DDistance — для типу geometry повертає мінімальну тривимірну евклідову відстань (на основі просторової системи координат) між двома геометріями в одиницях проекції."

#: ../../en/3d.rst:54
msgid "ST_3DDWithin — For 3d (z) geometry type Returns true if two geometries 3d distance is within number of units."
msgstr "ST_3DDWithin — для тривимірних (z) геометрій повертає true, якщо відстань між двома геометріями у 3D просторі не перевищує задану кількість одиниць."

#: ../../en/3d.rst:55
msgid "ST_3DDFullyWithin — Returns true if all of the 3D geometries are within the specified distance of one another."
msgstr "ST_3DDFullyWithin — повертає true, якщо всі тривимірні геометрії знаходяться в межах заданої відстані одна від одної."

#: ../../en/3d.rst:56
msgid "ST_3DIntersects — Returns TRUE if the Geometries \"spatially intersect\" in 3d - only for points and linestrings"
msgstr "ST_3DIntersects — повертає TRUE, якщо геометрії «просторово перетинаються» у 3D — працює лише для точок та лінійних рядків (linestrings)"

#: ../../en/3d.rst:57
msgid "ST_3DLongestLine — Returns the 3-dimensional longest line between two geometries"
msgstr "ST_3DLongestLine — повертає найтривалішу тривимірну лінію між двома геометріями"

#: ../../en/3d.rst:58
msgid "ST_3DMaxDistance — For geometry type Returns the 3-dimensional cartesian maximum distance (based on spatial ref) between two geometries in projected units."
msgstr "ST_3DMaxDistance — для типу geometry повертає максимальну тривимірну евклідову відстань (на основі просторової системи координат) між двома геометріями в одиницях проекції."

#: ../../en/3d.rst:59
msgid "ST_3DShortestLine — Returns the 3-dimensional shortest line between two geometries"
msgstr "ST_3DShortestLine — повертає найкоротшу тривимірну лінію між двома геометріями"

#: ../../en/3d.rst:61
msgid "For example, we can calculate the distance between our unit cube and a point using the ST_3DDistance function:"
msgstr "Наприклад, ми можемо обчислити відстань між нашим кубом зі стороною 1 та точкою за допомогою функції ST_3DDistance:"

#: ../../en/3d.rst:89
msgid "N-D Indexes"
msgstr "N-вимірні індекси"

#: ../../en/3d.rst:91
msgid "Once you have data in higher dimensions it may make sense to index it. However, you should think carefully about the distribution of your data in all dimensions before applying a multi-dimensional index."
msgstr "Коли у вас є дані в багатовимірному форматі, може мати сенс їх індексувати. Проте варто ретельно обдумати розподіл ваших даних у всіх вимірах перед застосуванням багатовимірного індексу."

#: ../../en/3d.rst:93
msgid "Indexes are only useful when they allow the database to drastically reduce the number of return rows as a result of a WHERE condition. For a higher dimension index to be useful, the data must cover a wide range of that dimension, relative to the kinds of queries you are constructing."
msgstr "Індекси корисні лише тоді, коли вони дозволяють базі даних значно зменшити кількість рядків у результаті умови WHERE. Щоб багатовимірний індекс був ефективним, дані мають охоплювати широкий діапазон по відповідному виміру відносно типів запитів, які ви формуєте."

#: ../../en/3d.rst:95
msgid "A set of DEM points would probably be a *poor* candidate for a 3-D index, since the queries would usually be extracting a 2-D box of points, and rarely attempting to select a Z-slice of points."
msgstr "Набір точок DEM, ймовірно, буде поганим кандидатом для 3D-індексу, оскільки запити зазвичай витягують двовимірну область точок і рідко намагаються вибрати зріз по осі Z."

#: ../../en/3d.rst:96
msgid "A set of GPS traces in X/Y/T space might be a *good* candidate for a 3-D index, if the GPS tracks overlapped each other frequently in all dimensions (for example, driving the same route over and over at different times), since there would be large variability in all dimensions of the data set."
msgstr "Набір GPS-треків у просторі X/Y/T може бути хорошим кандидатом для 3D-індексу, якщо GPS-шляхи часто перекриваються у всіх вимірах (наприклад, багаторазове проїзджання того самого маршруту в різний час), оскільки в наборі даних буде велика варіабельність у всіх вимірах."

#: ../../en/3d.rst:98
msgid "You can create a multi-dimensional index on data of any dimensionality (even mixed dimensionality). For example, to create a multi-dimensional index on the ``nyc_streets`` table,"
msgstr "Ви можете створити багатовимірний індекс для даних будь-якої розмірності (навіть змішаної). Наприклад, щоб створити багатовимірний індекс для таблиці nyc_streets,."

#: ../../en/3d.rst:105
msgid "The ``gist_geometry_ops_nd`` parameter tells PostGIS to use the N-D index instead of the standard 2-D index."
msgstr "Параметр ``gist_geometry_ops_nd`` вказує PostGIS використовувати N-вимірний індекс замість стандартного 2-вимірного індексу."

#: ../../en/3d.rst:107
msgid "Once you have the index built, you can use it in queries with the ``&&&`` index operator. ``&&&`` has the same semantics as ``&&``, \"bounding boxes interact\", but applies those semantics using all the dimensions of the input geometries. Geometries with mis-matching dimensionality do not interact."
msgstr "Після створення індексу ви можете використовувати його в запитах з оператором індексу ``&&&``. Оператор ``&&&`` має таке саме значення, як і ``&&`` — «обмежувальні коробки взаємодіють», але застосовує ці правила до всіх вимірів вхідних геометрій. Геометрії з різною кількістю вимірів не взаємодіють."

#: ../../en/3d.rst:123
msgid "To search the ``nyc_streets`` table using the N-D index, just replace the usual ``&&`` 2-D index operator with the ``&&&`` operator."
msgstr "Щоб виконати пошук у таблиці ``nyc_streets `` із використанням N-вимірного індексу, просто замініть звичайний оператор 2D-індексу ``&& `` на оператор ``&&& ``."

#: ../../en/3d.rst:139
msgid "The results should be the same. In general the N-D index is very slightly slower than the 2-D index, so only use the N-D index where you are certain that N-D queries will improve the selectivity of your queries."
msgstr "Результати мають бути однаковими. Загалом, N-вимірний індекс працює трохи повільніше за 2-вимірний, тому використовуйте N-вимірний індекс лише тоді, коли впевнені, що багатовимірні запити покращать селективність ваших запитів."
