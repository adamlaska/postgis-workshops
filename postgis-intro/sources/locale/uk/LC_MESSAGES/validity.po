# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012-2023, Paul Ramsey | Mark Leslie | PostGIS contributors
# This file is distributed under the same license as the Introduction to PostGIS package.
# Denys Kovshun <deniskovshun@gmail.com>, 2025.
msgid ""
msgstr ""
"Project-Id-Version: Introduction to PostGIS 1.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-07 21:46-0500\n"
"PO-Revision-Date: 2025-08-09 19:23+0000\n"
"Last-Translator: Denys Kovshun <deniskovshun@gmail.com>\n"
"Language-Team: Ukrainian <https://weblate.osgeo.org/projects/"
"postgis-workshop/validity/uk/>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2;\n"
"X-Generator: Weblate 5.4.3\n"

#: ../../en/validity.rst:4
msgid "Validity"
msgstr "Валідність"

#: ../../en/validity.rst:6
msgid "In 90% of the cases the answer to the question, \"why is my query giving me a 'TopologyException' error\" is \"one or more of the inputs are invalid\".  Which begs the question: what does it mean to be invalid, and why should we care?"
msgstr ""
"У 90% випадків відповідь на питання «чому мій запит видає помилку "
"«TopologyException»» звучить так: «one or more of the inputs are invalid.  "
"Це викликає питання: що означає «invalid» і чому нам слід про це турбуватися?"

#: ../../en/validity.rst:9
msgid "What is Validity"
msgstr "Що таке валідність"

#: ../../en/validity.rst:11
msgid "Validity is most important for polygons, which define bounded areas and require a good deal of structure. Lines are very simple and cannot be invalid, nor can points."
msgstr ""
"Валідність є найважливішою для полігонів, які визначають обмежені області і "
"вимагають значної структури. Лінії є дуже простими і не можуть бути "
"недійсними, так само як і точки."

#: ../../en/validity.rst:13
msgid "Some of the rules of polygon validity feel obvious, and others feel arbitrary (and in fact, are arbitrary)."
msgstr ""
"Деякі правила валідності полігонів здаються очевидними, а інші — довільними ("
"і насправді є довільними)."

#: ../../en/validity.rst:15
msgid "Polygon rings must close."
msgstr "Полігонми повинні бути замкненими."

#: ../../en/validity.rst:16
msgid "Rings that define holes should be inside rings that define exterior boundaries."
msgstr ""
"Кільця, що визначають отвори, повинні знаходитися всередині кілець, що "
"визначають зовнішні межі."

#: ../../en/validity.rst:17
msgid "Rings may not self-intersect (they may neither touch nor cross themselves)."
msgstr ""
"Кільця не можуть перетинатися між собою (вони не можуть ні стикатися, ні "
"перетинатися)."

#: ../../en/validity.rst:18
msgid "Rings may not touch other rings, except at a point."
msgstr "Кільця не можуть торкатися інших кілець, за винятком однієї точки."

#: ../../en/validity.rst:19
msgid "Elements of multi-polygons may not touch each other."
msgstr "Елементи багатокутників не можуть торкатися один одного."

#: ../../en/validity.rst:21
msgid "The last three rules are in the arbitrary category. There are other ways to define polygons that are equally self-consistent but the rules above are the ones used by the :term:`OGC` :term:`SFSQL` standard that PostGIS conforms to."
msgstr ""
"Останні три правила належать до категорії довільних. Існують інші способи "
"визначення багатокутників, які є рівноцінними, але вищезазначені правила "
"використовуються стандартом :term:`OGC` :term:`SFSQL`, якому відповідає "
"PostGIS."

#: ../../en/validity.rst:23
msgid "The reason the rules are important is because algorithms for geometry calculations depend on consistent structure in the inputs. It is possible to build algorithms that have no structural assumptions, but those routines tend to be very slow, because the first step in any structure-free routine is to *analyze the inputs and build structure into them*."
msgstr ""
"Причина, чому правила є важливими, полягає в тому, що алгоритми для "
"обчислень з геометрією залежать від узгодженої структури вхідних даних. "
"Можна створити алгоритми, які не роблять жодних структурних припущень, але "
"такі процедури зазвичай працюють дуже повільно, оскільки першим кроком у "
"будь-якій процедурі без попередньої структури є аналіз вхідних даних і "
"побудова структури в них."

#: ../../en/validity.rst:25
msgid "Here's an example of why structure matters. This polygon is invalid:"
msgstr ""
"Ось приклад того, чому структура має значення. Цей багатокутник є "
"некоректним:"

#: ../../en/validity.rst:31
msgid "You can see the invalidity a little more clearly in this diagram:"
msgstr "На цій діаграмі можна трохи чіткіше побачити помилку:"

#: ../../en/validity.rst:35
msgid "The outer ring is actually a figure-eight, with a self-intersection in the middle. Note that the graphic routines successfully render the polygon fill, so that visually it is appears to be an \"area\": two one-unit squares, so a total area of two units of area."
msgstr ""
"Зовнішнє кільце насправді має форму «вісімки» з самоперетином посередині. "
"Зверніть увагу, що графічні процедури успішно відображають заповнення "
"полігону, тож візуально він виглядає як «площа»: два квадрати розміром один "
"на один, тобто загальна площа — дві одиниці."

#: ../../en/validity.rst:37
msgid "Let's see what the database thinks the area of our polygon is:"
msgstr "Давайте подивимося, яку площу нашого багатокутника визначає база даних:"

#: ../../en/validity.rst:51
msgid "What's going on here? The algorithm that calculates area assumes that rings do not self-intersect. A well-behaved ring will always have the area that is bounded (the interior) on one side of the bounding line (it doesn't matter which side, just that it is on *one* side). However, in our (poorly behaved) figure-eight, the bounded area is to the right of the line for one lobe and to the left for the other. This causes the areas calculated for each lobe to cancel out (one comes out as 1, the other as -1) hence the \"zero area\" result."
msgstr ""
"Що тут відбувається? Алгоритм, який обчислює площу, передбачає, що кільця не "
"мають самоперетинів. «Правильне» кільце завжди має площу, обмежену ("
"внутрішню частину), розташовану з одного боку від обмежувальної лінії ("
"неважливо, з якого саме боку, головне — що лише з одного). Однак у нашій ("
"неправильно побудованій) «вісімці» обмежена площа для однієї петлі "
"знаходиться праворуч від лінії, а для іншої — ліворуч. Це призводить до "
"того, що обчислені площі для кожної петлі взаємно компенсуються (одна "
"виходить як +1, інша як −1), і в результаті маємо «нульову площу»."

#: ../../en/validity.rst:55
msgid "Detecting Validity"
msgstr "Визначення валідності"

#: ../../en/validity.rst:57
msgid "In the previous example we had one polygon that we **knew** was invalid. How do we detect invalidity in a table with millions of geometries? With the :command:`ST_IsValid(geometry)` function. Used against our figure-eight, we get a quick answer:"
msgstr ""
"У попередньому прикладі ми мали один багатокутник, про який **знали**, що "
"він є недійсним. Як виявити недійсність у таблиці з мільйонами геометрій? За "
"допомогою функції :command:`ST_IsValid(geometry)`. Застосувавши її до нашої "
"вісімки, ми отримуємо швидку відповідь:"

#: ../../en/validity.rst:69
msgid "Now we know that the feature is invalid, but we don't know why. We can use the :command:`ST_IsValidReason(geometry)` function to find out the source of the invalidity:"
msgstr ""
"Тепер ми знаємо, що об'єкт є недійсним, але не знаємо, чому. Ми можемо "
"використати функцію :command:`ST_IsValidReason(geometry)`, щоб з'ясувати "
"причину недійсності:"

#: ../../en/validity.rst:81
msgid "Note that in addition to the reason (self-intersection) the location of the invalidity (coordinate (1 1)) is also returned."
msgstr ""
"Зверніть увагу, що крім причини (самоперетин) також повертається місце "
"розташування недопустимого елемента (координати (1 1))."

#: ../../en/validity.rst:83
msgid "We can use the :command:`ST_IsValid(geometry)` function to test our tables too:"
msgstr ""
"Ми також можемо скористатися функцією :command:ST_IsValid(geometry), щоб "
"перевірити наші таблиці:"

#: ../../en/validity.rst:104
msgid "Repairing Invalidity"
msgstr "Виправлення некоректної геометрії"

#: ../../en/validity.rst:106
msgid "Repairing invalidity involves stripping a polygon down to its simplest structures (rings), ensuring the rings follow the rules of validity, then building up new polygons that follow the rules of ring enclosure. Frequently the results are intuitive, but in the case of extremely ill-behaved inputs, the valid outputs may not conform to your intuition of how they should look. Recent versions of PostGIS include different algorithms for geometry repair: read the `manual page <http://postgis.net/docs/ST_MakeValid.html>`_ carefully and choose the one you like best."
msgstr ""
"Виправлення некоректної геометрії передбачає розбиття полігону на його "
"найпростіші структури (кільця), перевірку, що кільця відповідають правилам "
"валідації, а потім побудову нових полігонів, що дотримуються правил "
"вкладення/замикання кілець. Часто результати бувають інтуїтивно зрозумілими, "
"але у випадку надто «погано» сформованих вхідних даних валідні вихідні "
"геометрії можуть не відповідати вашому уявленню про те, як вони мали б "
"виглядати. У новіших версіях PostGIS є кілька алгоритмів для відновлення "
"геометрій — уважно прочитайте сторінку довідки ST_MakeValid і виберіть той, "
"який вам підходить."

#: ../../en/validity.rst:108
msgid "For example, here's a classic invalidity -- the \"banana polygon\" -- a single ring that encloses an area but bends around to touch itself, leaving a \"hole\" which is not actually a hole."
msgstr ""
"Наприклад, ось класичний випадок некоректної геометрії — «банановий полігон» "
"— одне кільце, яке охоплює площу, але вигинається так, що торкається само "
"себе, утворюючи «дірку», яка насправді не є діркою."

#: ../../en/validity.rst:117
msgid "Running `ST_MakeValid <http://postgis.net/docs/ST_MakeValid.html>`_ on the polygon returns a valid :term:`OGC` polygon, consisting of an outer and inner ring that touch at one point."
msgstr ""
"Виконання команди `ST_MakeValid <http://postgis.net/docs/ST_MakeValid.html>`"
"_ на полігоні повертає валідний полігон :term:`OGC`, що складається з "
"зовнішнього та внутрішнього кілець, які стикаються в одній точці."

#: ../../en/validity.rst:133
msgid "The \"banana polygon\" (or \"inverted shell\") is a case where the :term:`OGC` topology model for valid geometry and the model used internally by ESRI differ. The ESRI model considers rings that touch to be invalid, and prefers the banana form for this kind of shape. The OGC model is the reverse. Neither is \"correct\", they are just different ways to model the same situation."
msgstr ""
"«Банановий полігон» (або «інверсна оболонка») — це випадок, коли топологічна "
"модель валідної геометрії за :term:OGC та модель, яку внутрішньо "
"використовує ESRI, відрізняються. Модель ESRI вважає кільця, що торкаються, "
"некоректними й надає перевагу банановій формі для такого типу фігур. Модель "
"OGC — навпаки. Жодна з них не є «правильною» чи «неправильною» — це просто "
"різні способи моделювання однієї й тієї ж ситуації."

#: ../../en/validity.rst:137
msgid "Bulk Validity Repair"
msgstr "Масове виправлення геометрії"

#: ../../en/validity.rst:139
msgid "Here's an example of SQL to flag invalid geometries for review while adding a repaired version to the table."
msgstr ""
"Ось приклад SQL-запиту, який позначає некоректні геометрії для перевірки та "
"одночасно додає виправлену версію до таблиці."

#: ../../en/validity.rst:159
msgid "A good tool for visually repairing invalid geometry is OpenJump (http://openjump.org) which includes a validation routine under **Tools->QA->Validate Selected Layers**."
msgstr ""
"Хорошим інструментом для візуального виправлення некоректної геометрії є "
"OpenJump (http://openjump.org), який містить функцію перевірки коректності "
"за шляхом Tools->QA->Validate Selected Layers."

#: ../../en/validity.rst:163
msgid "Function List"
msgstr "Список функцій"

#: ../../en/validity.rst:165
msgid "`ST_IsValid(geometry A) <http://postgis.net/docs/ST_IsValid.html>`_: Returns a boolean indiciting whether the geometery is valid."
msgstr ""
"ST_IsValid(geometry A) <http://postgis.net/docs/ST_IsValid.html>_: Повертає "
"булеве значення, яке вказує, чи є геометрія коректною."

#: ../../en/validity.rst:167
msgid "`ST_IsValidReason(geometry A) <http://postgis.net/docs/ST_IsValidReason.html>`_: Returns a text string with the reason for the invalidity and a coordinate of invalidity."
msgstr ""
"ST_IsValidReason(geometry A) <http://postgis.net/docs/ST_IsValidReason."
"html>_: Повертає текстовий рядок із причиною некоректності та координатою, "
"де вона виникає."

#: ../../en/validity.rst:169
msgid "`ST_MakeValid(geometry A) <http://postgis.net/docs/ST_MakeValid.html>`_: Returns a geometry re-constructed to obey the validity rules."
msgstr ""
"`ST_MakeValid(геометрія A) <http://postgis.net/docs/ST_MakeValid.html>`_: "
"Повертає геометрію, реконструйовану відповідно до правил валідності."
