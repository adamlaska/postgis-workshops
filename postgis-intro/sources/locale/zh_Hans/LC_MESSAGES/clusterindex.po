# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Paul Ramsey | Mark Leslie
# This file is distributed under the same license as the Introduction to PostGIS package.
# Chen <onsummer@foxmail.com>, 2022.
# Wangdapeng <wangdapeng20191008@gmail.com>, 2025.
msgid ""
msgstr ""
"Project-Id-Version: Introduction to PostGIS 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-07 21:46-0500\n"
"PO-Revision-Date: 2025-03-27 06:47+0000\n"
"Last-Translator: Wangdapeng <wangdapeng20191008@gmail.com>\n"
"Language-Team: Chinese (Simplified) <https://weblate.osgeo.org/projects/"
"postgis-workshop/clusterindex/zh_Hans/>\n"
"Language: zh_Hans\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.4.3\n"

#: ../../en/clusterindex.rst:4
msgid "Clustering on Indices"
msgstr "索引聚类"

#: ../../en/clusterindex.rst:6
msgid ""
"Databases can only retrieve information as fast as they can get it off of "
"disk. Small databases will float up entirely into RAM cache, and get away "
"from physical disk limitations, but for large databases, access to the "
"physical disk will be a limiting stop in disk access speed."
msgstr ""
"数据库的查询速度受限于磁盘读取性能。小型数据库可完全载入内存缓存，从而规避物"
"理磁盘的瓶颈；但对于大型数据库而言，物理磁盘的I/"
"O速度将成为数据访问的关键制约因素。"

#: ../../en/clusterindex.rst:8
msgid ""
"Data is written to disk opportunistically, so there is not necessarily any "
"correlation between the order data is stored on the disk and the way it will "
"be accessed or organized by applications."
msgstr "数据写入磁盘的顺序具有随机性，因此磁盘存储顺序与应用程序访问或组织方式之间不"
"存在必然关联。"

#: ../../en/clusterindex.rst:13
msgid ""
"One way to speed up access to data is to ensure that records which is likely "
"to be retrieved together in the same result set are located in similar "
"physical locations on the hard disk platters. This is called \"clustering\"."
msgstr "提升数据访问速度的一种有效方法是通过\"聚类\""
"（Clustering）技术，确保可能被同时检索的记录在物理磁盘上相邻存储。"

#: ../../en/clusterindex.rst:15
msgid ""
"The right clustering scheme to use can be tricky, but a general rule "
"applies: indexes define a natural ordering scheme for data which is similar "
"to the access pattern that will be used in retrieving the data."
msgstr "选择合适的聚类方案可能较为复杂，但有一条通用原则：索引定义了数据的自然排序方"
"式，这种排序应与数据检索时的访问模式相匹配。"

#: ../../en/clusterindex.rst:20
msgid ""
"Because of this, ordering the data on the disk in the same order as the "
"index can provide a speed advantage in some cases."
msgstr "因此，将磁盘上的数据按照索引顺序存储，在某些情况下可获得查询加速效果。"

#: ../../en/clusterindex.rst:23
msgid "Clustering on the R-Tree"
msgstr "基于R-Tree的聚类"

#: ../../en/clusterindex.rst:25
msgid ""
"Spatial data tends to be accessed in spatially correlated windows: think of "
"the map window in a web or desktop application. All the data in the windows "
"has similar location value (or it wouldn't be in the window!)"
msgstr "空间数据的访问往往具有空间相关性：例如网页或桌面应用中的地图窗口。窗口内的所"
"有数据都具有相似的地理位置特征（否则就不会出现在该窗口中！）"

#: ../../en/clusterindex.rst:27
msgid ""
"So, clustering based on a spatial index makes sense for spatial data that is "
"going to be accessed with spatial queries: similar things tend to have "
"similar locations."
msgstr "因此，基于空间索引的聚类操作特别适合将通过空间查询访问的数据——因为具有相似特"
"征的对象往往位置也相近。"

#: ../../en/clusterindex.rst:29
msgid "Let's cluster our ``nyc_census_blocks`` based on their spatial index:"
msgstr "基于空间索引对``nyc_census_blocks``进行聚类操作："

#: ../../en/clusterindex.rst:36
msgid ""
"The command re-writes the ``nyc_census_blocks`` in the order defined by the "
"spatial index ``nyc_census_blocks_geom_gist``. Can you perceive a speed "
"difference? Maybe not, because the original data may have already had some "
"pre-existing spatial ordering (this is not uncommon in GIS data sets)."
msgstr ""
"该命令会按照空间索引``nyc_census_blocks_geom_gist``定义的顺序重写``nyc_census"
"_blocks``表数据。您可能感知不到速度差异——因为原始数据可能已具备一定的空间预排"
"序（这在GIS数据集中较为常见）。"

#: ../../en/clusterindex.rst:39
msgid "Disk Versus Memory/SSD"
msgstr "磁盘存储 vs 内存/固态存储"

#: ../../en/clusterindex.rst:41
msgid ""
"Most modern databases are run using SSD storage, which is much faster at "
"random access than old spinning magnetic media. Also, most modern databases "
"are running on top of data which is small enough to fit into the RAM of the "
"database server, and ends up there as the operating system \"virtual "
"filesystem\" caches it."
msgstr ""
"现代数据库普遍采用固态硬盘(SSD)存储，其随机访问速度远胜传统机械硬盘。此外，当"
"代数据库处理的数据量通常足够小，可完全载入数据库服务器的内存空间，"
"并最终通过操作系统\"虚拟文件系统\"进行缓存。"

#: ../../en/clusterindex.rst:43
msgid "Is clustering still necessary?"
msgstr "空间索引聚类是否仍有必要？"

#: ../../en/clusterindex.rst:45
msgid ""
"Surprisingly, yes. Keeping records that are \"near each other\" in space "
"\"near each other\" in memory increases the odds that related records will "
"move up the servers \"memory cache heirarchy\" together, and thus make "
"memory accesses faster."
msgstr ""
"令人惊讶的是，确实如此。将空间上「邻近」的记录在内存中也保持「邻近存储」，能"
"显著提升相关记录共同进入服务器「内存缓存层级」的概率，从而加速内存访问效率。"

#: ../../en/clusterindex.rst:50
msgid ""
"System RAM is not the fastest memory on a modern computer. There are several "
"levels of cache between system RAM and the actual CPU, and the underlying "
"operating system and processor will move data up and down the cache "
"heirarchy in blocks. If the block getting moved up happens to include the "
"piece of data the system will need next... that's a big win. Correlating the "
"memory structure with the spatial structure is a way in increase the odds of "
"that win happening."
msgstr ""
"在现代计算机体系中，系统内存(RAM)并非最快存储层级。CPU与内存之间存在多级缓存"
"，操作系统和处理器会以数据块为单位在缓存层级间上下迁移。若被预载入缓存的数据"
"块恰好包含系统即将需要的数据——这将显著提升性能。通过使内存数据分布与空间结构"
"相关联，可有效增加这种「缓存命中」的概率。"

#: ../../en/clusterindex.rst:53
msgid "Does Index Structure Matter?"
msgstr "索引结构是否影响性能？"

#: ../../en/clusterindex.rst:55
msgid ""
"In theory, yes. In practice, no really. As long as the index is a \"pretty "
"good\" spatial decomposition of the data, the main determinant of "
"performance will be the order of the actual table tuples."
msgstr "理论上可行，但实际效果有限。只要索引能对数据实现「基本合理」的空间分解，查询"
"性能的主要决定因素仍是表数据的物理存储顺序。"

#: ../../en/clusterindex.rst:57
msgid ""
"The difference between \"no index\" and \"index\" is generally huge and "
"highly measurable. The difference between \"mediocre index\" and \"great "
"index\" usually takes quite careful measurement to discern, and can be very "
"sensitive to the workload being tested."
msgstr ""
"\"无索引\"与\"有索引\"的性能差异通常非常显著且易于量化，而\"普通索引\"与"
"\"优化索引\"的差距往往需要精细测试才能辨别，且对具体工作负载高度敏感。"

#: ../../en/clusterindex.rst:61
msgid "Function List"
msgstr "函数列表"

#: ../../en/clusterindex.rst:63
msgid ""
"`CLUSTER <https://www.postgresql.org/docs/current/sql-cluster.html>`_: Re-"
"orders the data in a table to match the ordering in the index."
msgstr ""
"`CLUSTER <https://www.postgresql.org/docs/current/sql-cluster."
"html>`_：按照索引顺序重新排列表中的数据存储顺序。"
